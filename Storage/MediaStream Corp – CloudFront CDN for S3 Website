Context:
  
MediaStream Corp requires a complete infrastructure solution for their public marketing website, combining S3 static hosting with CloudFront CDN, HTTPS security, and automated content deployment.

Task:  
Create a Terraform configuration in /home/ubuntu/1841200-terraform-cf-s3-website/main.tf that:  

1. S3 Bucket Setup  
   - Creates mediastream-public-site with static website hosting (index/error documents)  
   - Automatically uploads local ./site/index.html and ./site/error.html after bucket creation  

2. CloudFront Distribution  
   - Uses the S3 website endpoint as origin  
   - Enforces HTTPS (redirect HTTP→HTTPS)  
   - Supports custom domain www.mediastream.io  
   - Includes cache invalidation capabilities  

3. Certificate Management  
   - Requests/imports an ACM certificate for www.mediastream.io in us-east-1  

4. Automation & Outputs  
   - Uses Terraform provisioners to sync local site files post-creation  
   - Outputs the CloudFront distribution domain name  

Additionally, after the S3 bucket is provisioned, the local files index.html and error.html (located in a ./sitedirectory) must be uploaded automatically. Use a local-exec provisioner in Terraform to invoke the AWS CLI (or a script) to sync ./site to the new bucket—ensuring the upload only runs once the bucket exists.
									
									
ANSWER:


provider "aws" {
  region = "us-east-1" # CloudFront requires certificates in us-east-1
}

# S3 Bucket for Static Website
resource "aws_s3_bucket" "media_stream_public_site" {
  bucket = "mediastream-public-site"
  acl    = "public-read"

  website {
    index_document = "index.html"
    error_document = "error.html"
  }

  tags = {
    Name = "mediastream-public-site"
  }
}

# Upload local site files to S3 using null_resource with local-exec
resource "null_resource" "upload_site_files" {
  triggers = {
    always_run = timestamp() # Ensures this runs on every apply
  }

  provisioner "local-exec" {
    command = "aws s3 sync ./site/ s3://${aws_s3_bucket.media_stream_public_site.id}/ --acl public-read"
  }

  depends_on = [aws_s3_bucket.media_stream_public_site]
}

# ACM Certificate for Custom Domain
resource "aws_acm_certificate" "media_stream_cert" {
  domain_name       = "www.mediastream.io"
  validation_method = "DNS"

  lifecycle {
    create_before_destroy = true
  }
}

# CloudFront Origin Access Identity
resource "aws_cloudfront_origin_access_identity" "origin_access_identity" {
  comment = "MediaStream Corp OAI"
}

# CloudFront Distribution
resource "aws_cloudfront_distribution" "media_stream_distribution" {
  origin {
    domain_name = aws_s3_bucket.media_stream_public_site.bucket_regional_domain_name
    origin_id   = "S3-mediastream-public-site"

    s3_origin_config {
      origin_access_identity = aws_cloudfront_origin_access_identity.origin_access_identity.cloudfront_access_identity_path
    }
  }

  enabled             = true
  is_ipv6_enabled     = true
  default_root_object = "index.html"
  comment             = "MediaStream Corp CDN"

  aliases = ["www.mediastream.io"]

  default_cache_behavior {
    allowed_methods  = ["GET", "HEAD", "OPTIONS"]
    cached_methods   = ["GET", "HEAD"]
    target_origin_id = "S3-mediastream-public-site"

    forwarded_values {
      query_string = false
      cookies {
        forward = "none"
      }
    }

    viewer_protocol_policy = "redirect-to-https"
    min_ttl                = 0
    default_ttl            = 3600
    max_ttl                = 86400
    compress               = true
  }

  price_class = "PriceClass_100"

  restrictions {
    geo_restriction {
      restriction_type = "none"
    }
  }

  viewer_certificate {
    acm_certificate_arn = aws_acm_certificate.media_stream_cert.arn
    ssl_support_method  = "sni-only"
    minimum_protocol_version = "TLSv1.2_2021"
  }

  # Cache invalidation capability
  custom_error_response {
    error_code         = 404
    response_code      = 404
    response_page_path = "/error.html"
  }

  depends_on = [
    aws_acm_certificate.media_stream_cert,
    null_resource.upload_site_files
  ]
}

# Output CloudFront Domain
output "cloudfront_domain" {
  value = aws_cloudfront_distribution.media_stream_distribution.domain_name
}

# Output S3 Website URL
output "s3_website_url" {
  value = aws_s3_bucket.media_stream_public_site.website_endpoint
}

# Output ACM Certificate ARN
output "acm_certificate_arn" {
  value = aws_acm_certificate.media_stream_cert.arn
}
