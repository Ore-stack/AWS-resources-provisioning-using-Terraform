Context:

ArcticView Analytics operates data pipelines that run 24/7 to process telemetry from smart city sensors. They need a centralized monitoring solution with alerts to detect anomalies and prevent delays in pipeline processing.

Task:
Complete the Terraform configuration to:
	•	Deploy CloudWatch metric alarms on an EC2 instance that processes the pipeline.
	•	Set alarms for:
	•	CPU Utilization > 80% for 5 minutes.
	•	Disk Read Ops > 1000 over 5 minutes.
	•	Send alarm notifications via SNS.
	•	SNS topic should be named arcticview-alerts with a dummy email subscription.

Note:
	•	The EC2 instance is assumed to be running already.
	•	Use us-west-1a and name resources with the prefix arcticview-data-*.
	
ANSWER:

provider "aws" {
  region = "us-west-1a"
}

#----------------------------------------------------------
# Input variable for the existing EC2 instance to monitor
#----------------------------------------------------------
variable "instance_id" {
  description = "The ID of the EC2 instance processing the pipeline"
  type        = string
}

#----------------------------------------------------------
# Lookup the existing EC2 instance by ID
#----------------------------------------------------------
data "aws_instance" "pipeline" {
  instance_id = var.instance_id
}

#----------------------------------------------------------
# SNS Topic & Dummy Email Subscription
#----------------------------------------------------------
resource "aws_sns_topic" "alerts" {
  name = "arcticview-alerts"
}

resource "aws_sns_topic_subscription" "email" {
  topic_arn = aws_sns_topic.alerts.arn
  protocol  = "email"
  # replace with a real address when testing production
  endpoint  = "alerts@example.com"
}

#----------------------------------------------------------
# CloudWatch Alarm: CPU Utilization > 80% for 5 minutes
#----------------------------------------------------------
resource "aws_cloudwatch_metric_alarm" "cpu_high" {
  alarm_name          = "arcticview-data-cpu-utilization-high"
  alarm_description   = "Triggers when CPUUtilization > 80% for 5 consecutive minutes"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = 1
  period              = 300
  threshold           = 80
  statistic           = "Average"
  namespace           = "AWS/EC2"

  dimensions = {
    InstanceId = data.aws_instance.pipeline.id
  }

  alarm_actions = [
    aws_sns_topic.alerts.arn
  ]
}
