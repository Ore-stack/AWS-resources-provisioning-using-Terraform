Context: 

All TerraNova Tech environments are locked down behind a hardened bastion host. EC2 instances in private subnets must be configured post-launch (install packages, update configs, restart services), but theyâ€™re not directly reachable.

Task:  
Configure Terraform so that once each EC2 instance is up, a remote-exec provisioner tunnels through the bastion host and runs shell commands on the private instance.

Question:  
How would you securely and dynamically leverage Terraformâ€™s remote-exec provisionerâ€”using the connection {} block with a bastion_host settingâ€”to tunnel through the jump host and execute commands like sudo yum install -y nginx on those private EC2 instances?

Terraform Challenge:  
In your aws_instance resource, set up a remote-exec provisioner that:  
  * Defines a connection block with SSH user, key, and proxy/bastion_host settings  
  * Tunnels all SSH traffic through the bastion host  
  * Executes a simple shell command (sudo yum install -y nginx) on the target instance  

Validation:  
Run solve after provisioning to verify that the bastion host, private instances, and the tunneled remote-exec commands have all been successfully. applied. 


ANSWER:


provider "aws" {
  region = "eu-central-1"
}

#########################
# 1. Key Pair (used for both hosts)
#########################
resource "tls_private_key" "ssh_key" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

resource "aws_key_pair" "deployer" {
  key_name   = "terra-key"
  public_key = tls_private_key.ssh_key.public_key_openssh
}

#########################
# 2. Security Groups
#########################
resource "aws_security_group" "bastion_sg" {
  name   = "bastion-sg"
  vpc_id = var.vpc_id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"] # Only for demo â€“ restrict in production
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_security_group" "private_sg" {
  name   = "private-ec2-sg"
  vpc_id = var.vpc_id

  ingress {
    from_port       = 22
    to_port         = 22
    protocol        = "tcp"
    security_groups = [aws_security_group.bastion_sg.id]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

#########################
# 3. Bastion Host (public subnet)
#########################
resource "aws_instance" "bastion" {
  ami                    = var.ami_id
  instance_type          = "t3.micro"
  subnet_id              = var.public_subnet_id
  vpc_security_group_ids = [aws_security_group.bastion_sg.id]
  key_name               = aws_key_pair.deployer.key_name

  tags = {
    Name = "bastion"
  }
}

#########################
# 4. Private EC2 Instance
#########################
resource "aws_instance" "private_ec2" {
  ami                    = var.ami_id
  instance_type          = "t3.micro"
  subnet_id              = var.private_subnet_id
  vpc_security_group_ids = [aws_security_group.private_sg.id]
  key_name               = aws_key_pair.deployer.key_name

  tags = {
    Name = "private-instance"
  }

  # ðŸ”§ Post-provision remote execution via bastion tunnel
  provisioner "remote-exec" {
    inline = [
      "echo 'Running remote setup on private instance...'",
      "sudo yum install -y nginx"
    ]

    connection {
      type        = "ssh"
      user        = "ec2-user"
      private_key = tls_private_key.ssh_key.private_key_pem
      host        = self.private_ip

      bastion_host        = aws_instance.bastion.public_ip
      bastion_user        = "ec2-user"
      bastion_private_key = tls_private_key.ssh_key.private_key_pem
    }
  }

  depends_on = [aws_instance.bastion]
}

#########################
# 5. Output
#########################
output "bastion_ip" {
  value = aws_instance.bastion.public_ip
}

output "private_ip" {
  value = aws_instance.private_ec2.private_ip
}
